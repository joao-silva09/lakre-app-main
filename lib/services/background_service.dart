// lib/services/background_location_service.dart

import 'dart:async';
import 'dart:ui';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:flutter_background_service_android/flutter_background_service_android.dart';
import 'package:flutter_background_service_ios/flutter_background_service_ios.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:location/location.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:pigma/backend/schema/structs/positions_struct.dart';
import 'package:pigma/flutter_flow/flutter_flow_util.dart';

class BackgroundLocationService {
  static BackgroundLocationService? _instance;
  final FlutterBackgroundService _service = FlutterBackgroundService();

  // Singleton pattern
  factory BackgroundLocationService() {
    _instance ??= BackgroundLocationService._internal();
    return _instance!;
  }

  BackgroundLocationService._internal();

  // Canal de notifica√ß√£o para Android
  static const String _notificationChannelId = 'rotasys_channel';
  static const String _notificationChannelName = 'RotaSys Tracking';
  static const String _notificationChannelDescription =
      'RotaSys location tracking service';

  // Chaves para SharedPreferences
  static const String _prefKeyIsTrackingActive = 'bg_tracking_active';
  static const String _prefKeyCpf = 'bg_cpf';
  static const String _prefKeyRouteId = 'bg_routeId';
  static const String _prefKeyFinishViagem = 'bg_finish_viagem';
  static const String _prefKeyLastUpdateTimestamp = 'bg_last_update_timestamp';

  Future<void> initialize() async {
    debugPrint('üî∑ Inicializando servi√ßo de localiza√ß√£o em segundo plano');

    // Configurar notifica√ß√µes
    final flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

    if (await flutterLocalNotificationsPlugin
            .resolvePlatformSpecificImplementation<
                AndroidFlutterLocalNotificationsPlugin>() !=
        null) {
      await flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(const AndroidNotificationChannel(
            _notificationChannelId,
            _notificationChannelName,
            description: _notificationChannelDescription,
            // Aumentar a import√¢ncia para HIGH para evitar que o sistema mate o servi√ßo
            importance: Importance.high,
          ));

      debugPrint('üî∑ Canal de notifica√ß√£o criado com sucesso');
    }

    // Inicializar o plugin de notifica√ß√µes locais para iOS
    if (Platform.isIOS) {
      await flutterLocalNotificationsPlugin.initialize(
        const InitializationSettings(
          iOS: DarwinInitializationSettings(
            requestAlertPermission: true,
            requestBadgePermission: true,
            requestSoundPermission: true,
          ),
          android: AndroidInitializationSettings('app_icon'),
        ),
      );
    }

    // Configurar servi√ßo em segundo plano
    await _service.configure(
      androidConfiguration: AndroidConfiguration(
        onStart: _onStart,
        autoStart: false,
        isForegroundMode: true,
        foregroundServiceNotificationId: 888,
        notificationChannelId: _notificationChannelId,
        initialNotificationTitle: 'RotaSys Rastreamento',
        initialNotificationContent: 'Rastreando sua localiza√ß√£o...',
      ),
      iosConfiguration: IosConfiguration(
        autoStart: false,
        onForeground: _onStart,
        onBackground: _onIosBackground,
      ),
    );

    debugPrint('üî∑ Servi√ßo configurado com sucesso');

    // Verificar permiss√µes
    final permissionsGranted = await checkAndRequestPermissions();
    debugPrint('üî∑ Permiss√µes concedidas: $permissionsGranted');

    // Verificar se o servi√ßo foi inicializado anteriormente
    await checkAndRestartTracking();
  }

  // M√©todo para verificar e solicitar permiss√µes
  Future<bool> checkAndRequestPermissions() async {
    final Location location = Location();

    try {
      // Verificar servi√ßo
      bool serviceEnabled = await location.serviceEnabled();
      if (!serviceEnabled) {
        debugPrint('üî∂ Servi√ßo de localiza√ß√£o n√£o habilitado, solicitando...');
        serviceEnabled = await location.requestService();
        if (!serviceEnabled) {
          debugPrint('‚ùå Servi√ßo de localiza√ß√£o negado pelo usu√°rio');
          return false;
        }
      }

      // Verificar permiss√£o
      PermissionStatus permissionStatus = await location.hasPermission();
      if (permissionStatus == PermissionStatus.denied) {
        debugPrint('üî∂ Permiss√£o de localiza√ß√£o n√£o concedida, solicitando...');
        permissionStatus = await location.requestPermission();
        if (permissionStatus != PermissionStatus.granted) {
          debugPrint('‚ùå Permiss√£o de localiza√ß√£o negada pelo usu√°rio');
          return false;
        }
      }

      // Verificar modo em segundo plano
      bool backgroundEnabled = await location.isBackgroundModeEnabled();
      if (!backgroundEnabled) {
        debugPrint('üî∂ Modo em segundo plano n√£o habilitado, habilitando...');
        backgroundEnabled = await location.enableBackgroundMode(enable: true);
        if (!backgroundEnabled) {
          debugPrint('‚ùå N√£o foi poss√≠vel habilitar o modo em segundo plano');
          return false;
        }
      }

      debugPrint('‚úÖ Todas as permiss√µes concedidas com sucesso');
      return true;
    } catch (e) {
      debugPrint('‚ùå Erro ao verificar permiss√µes: $e');
      return false;
    }
  }

  // Este m√©todo √© chamado para iOS quando o app est√° em segundo plano
  @pragma('vm:entry-point')
  static Future<bool> _onIosBackground(ServiceInstance service) async {
    debugPrint('üî∑ _onIosBackground chamado √†s ${DateTime.now()}');
    WidgetsFlutterBinding.ensureInitialized();
    DartPluginRegistrant.ensureInitialized();
    return true;
  }

  // Este m√©todo √© o ponto de entrada do servi√ßo em segundo plano
  @pragma('vm:entry-point')
  static void _onStart(ServiceInstance service) async {
    debugPrint(
        'üîµ Servi√ßo de localiza√ß√£o em segundo plano iniciado √†s ${DateTime.now()}');

    try {
      WidgetsFlutterBinding.ensureInitialized();
      DartPluginRegistrant.ensureInitialized();

      // Configurar servi√ßo como foreground no Android com prioridade alta
      if (service is AndroidServiceInstance) {
        debugPrint('üîµ Configurando servi√ßo como foreground no Android');

        // Definir como servi√ßo em primeiro plano
        service.setAsForegroundService();

        // Configurar notifica√ß√£o persistente
        await service.setForegroundNotificationInfo(
          title: 'RotaSys Rastreamento Ativo',
          content: 'O rastreamento de localiza√ß√£o est√° ativo em segundo plano',
        );
      }

      // Definir uma vari√°vel para rastrear o status de execu√ß√£o
      bool isServiceRunning = true;

      // Registrar manipuladores para comandos recebidos
      service.on('isRunning').listen((event) {
        debugPrint('üîµ Comando isRunning recebido');
        service.invoke('onRunningStatus', {'isRunning': isServiceRunning});
      });

      service.on('stopService').listen((event) {
        debugPrint('üî∂ Comando para parar o servi√ßo recebido');
        isServiceRunning = false;
        service.stopSelf();
      });

      service.on('updateNotification').listen((event) {
        if (service is AndroidServiceInstance) {
          debugPrint('üîµ Atualizando notifica√ß√£o');
          service.setForegroundNotificationInfo(
            title: event?['title'] ?? 'RotaSys Rastreamento',
            content: event?['content'] ?? 'Rastreando sua rota...',
          );
        }
      });

      // Inicializar Location de forma isolada para evitar vazamentos
      final Location locationInstance = Location();
      await locationInstance.enableBackgroundMode(enable: true);
      debugPrint('üîµ Modo de segundo plano do location ativado');

      // Criar timer para verificar periodicidade de forma precisa
      int executionCount = 0;
      int successfulLocationUpdates = 0;
      final startTime = DateTime.now();

      // Salvar timestamp de in√≠cio no SharedPreferences para rastreamento
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(
          'bg_service_start_timestamp', startTime.millisecondsSinceEpoch);

      // Configurar timer para coletar a localiza√ß√£o a cada 1 minuto
      // Nota: definimos como 1 minuto para testes, mas pode ser ajustado para 5 minutos em produ√ß√£o
      Timer.periodic(const Duration(minutes: 1), (timer) async {
        final now = DateTime.now();
        executionCount++;

        debugPrint('üü¢ Timer executado (#$executionCount) √†s $now');
        debugPrint(
            'üü¢ Tempo desde o in√≠cio: ${now.difference(startTime).inMinutes} minutos');
        debugPrint(
            'üü¢ Atualiza√ß√µes bem-sucedidas: $successfulLocationUpdates de $executionCount (${(successfulLocationUpdates / executionCount * 100).toStringAsFixed(1)}%)');

        // Atualizar SharedPreferences com √∫ltima execu√ß√£o
        try {
          await prefs.setInt(
              _prefKeyLastUpdateTimestamp, now.millisecondsSinceEpoch);
        } catch (e) {
          debugPrint('‚ö†Ô∏è N√£o foi poss√≠vel salvar timestamp: $e');
        }

        // Atualizar notifica√ß√£o para garantir que o servi√ßo continue em foreground
        if (service is AndroidServiceInstance) {
          try {
            bool isForeground = await service.isForegroundService();
            debugPrint('üü¢ Servi√ßo est√° em foreground: $isForeground');

            if (isForeground) {
              await service.setForegroundNotificationInfo(
                title: 'RotaSys Rastreamento Ativo',
                content:
                    'Rastreando desde ${startTime.hour}:${startTime.minute.toString().padLeft(2, '0')} (${executionCount} verifica√ß√µes, ${successfulLocationUpdates} atualiza√ß√µes)',
              );
            } else {
              debugPrint(
                  '‚ùó Servi√ßo n√£o est√° em foreground, tentando restaurar...');
              service.setAsForegroundService();
            }
          } catch (e) {
            debugPrint('‚ùå Erro ao atualizar notifica√ß√£o: $e');
          }
        }

        // Se o servi√ßo n√£o estiver mais em execu√ß√£o, parar o timer
        if (!isServiceRunning) {
          debugPrint(
              'üî¥ Servi√ßo marcado como n√£o em execu√ß√£o, cancelando timer');
          timer.cancel();
          return;
        }

        // Verificar se o rastreamento est√° ativo
        try {
          final isActive = prefs.getBool(_prefKeyIsTrackingActive) ?? false;

          debugPrint('üü¢ Rastreamento ativo nas prefer√™ncias: $isActive');

          if (!isActive) {
            debugPrint('üî¥ Rastreamento marcado como inativo, parando servi√ßo');
            isServiceRunning = false;
            service.stopSelf();
            return;
          }

          // Obter dados da rota
          final cpf = prefs.getString(_prefKeyCpf) ?? '';
          final routeId = prefs.getString(_prefKeyRouteId) ?? '';
          final finishViagem = prefs.getBool(_prefKeyFinishViagem) ?? false;

          debugPrint(
              'üü¢ Dados da rota: CPF=$cpf, RouteId=$routeId, FinishViagem=$finishViagem');

          if (cpf.isEmpty || routeId.isEmpty) {
            debugPrint('‚ùó CPF ou RouteId vazios, pulando atualiza√ß√£o');
            return;
          }

          // Verificar permiss√µes e status do servi√ßo de localiza√ß√£o
          bool locationPermissionOk = true;

          try {
            final serviceEnabled = await locationInstance.serviceEnabled();
            final permissionStatus = await locationInstance.hasPermission();

            debugPrint(
                'üü¢ Status do servi√ßo de localiza√ß√£o: Habilitado=$serviceEnabled, Permiss√£o=$permissionStatus');

            if (!serviceEnabled ||
                permissionStatus != PermissionStatus.granted) {
              locationPermissionOk = false;
            }
          } catch (e) {
            debugPrint('‚ùå Erro ao verificar status da localiza√ß√£o: $e');
            locationPermissionOk = false;
          }

          if (!locationPermissionOk) {
            debugPrint(
                '‚ùó Servi√ßo de localiza√ß√£o ou permiss√µes n√£o dispon√≠veis');
            // Tentar reativar o servi√ßo de localiza√ß√£o
            try {
              await locationInstance.enableBackgroundMode(enable: true);
            } catch (e) {
              debugPrint('‚ùå N√£o foi poss√≠vel reativar o servi√ßo: $e');
            }
            return;
          }

          // Obter localiza√ß√£o atual
          try {
            debugPrint('üü¢ Obtendo localiza√ß√£o atual...');
            final locationData = await locationInstance.getLocation();

            if (locationData.latitude == null ||
                locationData.longitude == null) {
              debugPrint('‚ùó Localiza√ß√£o obtida com valores nulos');
              return;
            }

            debugPrint(
                'üìç Localiza√ß√£o obtida: Latitude=${locationData.latitude}, Longitude=${locationData.longitude}');
            successfulLocationUpdates++;

            // Salvar estat√≠sticas de sucesso
            await prefs.setInt(
                'bg_service_successful_updates', successfulLocationUpdates);
            await prefs.setInt('bg_service_total_checks', executionCount);

            // Criar estrutura de posi√ß√£o - CORRIGIDO
            // Primeiro criar as datas para evitar o erro de express√£o void
            final DateTime dataHora = DateTime.now();
            final DateTime dataHoraAjustada = dataHora
                .subtract(dataHora.timeZoneOffset)
                .subtract(const Duration(hours: 3));

            final position = PositionsStruct(
              cpf: cpf,
              routeId: int.tryParse(routeId),
              latitude: locationData.latitude,
              longitude: locationData.longitude,
              date: dataHoraAjustada,
              finish: false,
              finishViagem: finishViagem,
            );

            // Salvar a posi√ß√£o para sincroniza√ß√£o posterior
            await _savePositionForSync(position);

            // Enviar dados para o aplicativo principal - CORRIGIDO
            // Criar mapa separadamente antes de invocar
            final Map<String, dynamic> locationUpdateData = {
              'latitude': locationData.latitude,
              'longitude': locationData.longitude,
              'timestamp': DateTime.now().millisecondsSinceEpoch,
              'routeId': routeId,
              'cpf': cpf,
            };

            // Agora, use o mapa na fun√ß√£o invoke
            service.invoke('update_location', locationUpdateData);

            // Salvar √∫ltima localiza√ß√£o para recupera√ß√£o se o servi√ßo for reiniciado
            await prefs.setDouble('bg_last_latitude', locationData.latitude!);
            await prefs.setDouble('bg_last_longitude', locationData.longitude!);
          } catch (e) {
            debugPrint('‚ùå Erro ao obter localiza√ß√£o: $e');

            // Tentar reativar o servi√ßo de localiza√ß√£o em caso de erro
            try {
              await locationInstance.enableBackgroundMode(enable: true);
            } catch (innerError) {
              debugPrint(
                  '‚ùå Erro ao reativar modo em segundo plano: $innerError');
            }
          }
        } catch (e) {
          debugPrint('‚ùå Erro no timer principal: $e');
        }
      });

      // Se estivermos no Android, garantir que o servi√ßo n√£o seja facilmente encerrado
      if (Platform.isAndroid) {
        debugPrint(
            'üîµ Configurando servi√ßo no Android para evitar que seja encerrado');

        // Registrar receiver para reiniciar o servi√ßo se for encerrado - CORRIGIDO
        service.on('restart').listen((_) async {
          debugPrint('üîÑ Recebido comando para reiniciar o servi√ßo');
          // Em vez de chamar service.startService(), use a inst√¢ncia global do servi√ßo
          final FlutterBackgroundService backgroundService =
              FlutterBackgroundService();
          await backgroundService.startService();
        });
      }

      // Se estivermos no iOS, configura√ß√µes espec√≠ficas
      if (Platform.isIOS) {
        debugPrint('üîµ Configurando servi√ßo espec√≠fico para iOS');

        // No iOS, precisamos manter o aplicativo ciente que o servi√ßo est√° ativo
        Timer.periodic(const Duration(minutes: 10), (timer) {
          if (!isServiceRunning) {
            timer.cancel();
            return;
          }

          debugPrint('üîÑ Mantendo servi√ßo iOS ativo');
          service.invoke('keepAlive', {});
        });
      }
    } catch (e) {
      debugPrint('üí• Erro fatal no servi√ßo de background: $e');
      service.stopSelf();
    }
  }

  // Salvar posi√ß√£o para sincroniza√ß√£o posterior
  static Future<void> _savePositionForSync(PositionsStruct position) async {
    final prefs = await SharedPreferences.getInstance();

    try {
      // Recuperar lista atual de posi√ß√µes
      List<String> positionsJson = prefs.getStringList('ff_positions') ?? [];

      // Adicionar nova posi√ß√£o
      positionsJson.add(position.serialize());

      // Salvar lista atualizada
      await prefs.setStringList('ff_positions', positionsJson);

      debugPrint(
          'üìä Posi√ß√£o salva para sincroniza√ß√£o posterior. Total: ${positionsJson.length}');

      // Salvar informa√ß√£o adicional para recupera√ß√£o
      await prefs.setInt('bg_saved_positions_count', positionsJson.length);
      await prefs.setInt(
          'bg_last_save_timestamp', DateTime.now().millisecondsSinceEpoch);
    } catch (e) {
      debugPrint('‚ùå Erro ao salvar posi√ß√£o: $e');
    }
  }

  // Iniciar o servi√ßo de rastreamento
  Future<bool> startLocationUpdates({
    required String cpf,
    required String routeId,
    bool finishViagem = false,
  }) async {
    debugPrint(
        '‚ñ∂Ô∏è Solicita√ß√£o para iniciar rastreamento: CPF=$cpf, RouteId=$routeId, FinishViagem=$finishViagem');

    try {
      // Verificar permiss√µes antes de iniciar
      final permissionsGranted = await checkAndRequestPermissions();
      if (!permissionsGranted) {
        debugPrint(
            '‚ùå Permiss√µes n√£o concedidas, n√£o foi poss√≠vel iniciar o rastreamento');
        return false;
      }

      // Salvar par√¢metros
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_prefKeyCpf, cpf);
      await prefs.setString(_prefKeyRouteId, routeId);
      await prefs.setBool(_prefKeyFinishViagem, finishViagem);
      await prefs.setBool(_prefKeyIsTrackingActive, true);

      // Salvar estat√≠sticas iniciais
      await prefs.setInt(
          'bg_service_start_timestamp', DateTime.now().millisecondsSinceEpoch);
      await prefs.setInt('bg_service_successful_updates', 0);
      await prefs.setInt('bg_service_total_checks', 0);

      // Iniciar o servi√ßo
      final serviceStarted = await _service.startService();

      debugPrint('‚ñ∂Ô∏è Servi√ßo iniciado com sucesso: $serviceStarted');

      return serviceStarted;
    } catch (e) {
      debugPrint(
          '‚ùå Erro ao iniciar servi√ßo de localiza√ß√£o em segundo plano: $e');
      return false;
    }
  }

  // Parar o servi√ßo de rastreamento
  Future<bool> stopLocationUpdates() async {
    debugPrint('‚èπÔ∏è Solicita√ß√£o para parar rastreamento');

    try {
      // Desativar flag de rastreamento
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_prefKeyIsTrackingActive, false);

      // Salvar estat√≠sticas finais
      await prefs.setInt(
          'bg_service_stop_timestamp', DateTime.now().millisecondsSinceEpoch);

      // Tentar parar o servi√ßo diretamente
      _service.invoke('stopService');

      debugPrint('‚èπÔ∏è Servi√ßo marcado para parar');

      return true;
    } catch (e) {
      debugPrint('‚ùå Erro ao parar servi√ßo de localiza√ß√£o em segundo plano: $e');
      return false;
    }
  }

  // Verificar se o servi√ßo deve ser reiniciado
  Future<void> checkAndRestartTracking() async {
    debugPrint('üîÑ Verificando se o servi√ßo deve ser reiniciado');

    final prefs = await SharedPreferences.getInstance();
    final isActive = prefs.getBool(_prefKeyIsTrackingActive) ?? false;

    debugPrint('üîÑ Rastreamento ativo nas prefer√™ncias: $isActive');

    if (isActive) {
      final cpf = prefs.getString(_prefKeyCpf) ?? '';
      final routeId = prefs.getString(_prefKeyRouteId) ?? '';
      final finishViagem = prefs.getBool(_prefKeyFinishViagem) ?? false;

      debugPrint(
          'üîÑ Dados da rota: CPF=$cpf, RouteId=$routeId, FinishViagem=$finishViagem');

      if (cpf.isNotEmpty && routeId.isNotEmpty) {
        final restarted = await startLocationUpdates(
          cpf: cpf,
          routeId: routeId,
          finishViagem: finishViagem,
        );

        debugPrint('üîÑ Rastreamento reiniciado com sucesso: $restarted');
      } else {
        debugPrint(
            '‚ùó N√£o foi poss√≠vel reiniciar rastreamento: dados incompletos');
      }
    } else {
      debugPrint('‚ÑπÔ∏è N√£o h√° rastreamento ativo para reiniciar');
    }
  }

  // Verificar se o servi√ßo est√° em execu√ß√£o
  Future<bool> isRunning() async {
    final running = await _service.isRunning();
    debugPrint('‚ÑπÔ∏è Servi√ßo est√° rodando: $running');
    return running;
  }

  // Obter estat√≠sticas do servi√ßo
  Future<Map<String, dynamic>> getServiceStatistics() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      final startTimestamp = prefs.getInt('bg_service_start_timestamp') ?? 0;
      final lastUpdateTimestamp =
          prefs.getInt(_prefKeyLastUpdateTimestamp) ?? 0;
      final totalChecks = prefs.getInt('bg_service_total_checks') ?? 0;
      final successfulUpdates =
          prefs.getInt('bg_service_successful_updates') ?? 0;
      final savedPositionsCount = prefs.getInt('bg_saved_positions_count') ?? 0;

      final now = DateTime.now().millisecondsSinceEpoch;

      return {
        'isRunning': await isRunning(),
        'startTime': startTimestamp > 0
            ? DateTime.fromMillisecondsSinceEpoch(startTimestamp)
            : null,
        'lastUpdateTime': lastUpdateTimestamp > 0
            ? DateTime.fromMillisecondsSinceEpoch(lastUpdateTimestamp)
            : null,
        'runningTimeMinutes':
            startTimestamp > 0 ? (now - startTimestamp) ~/ 60000 : 0,
        'totalChecks': totalChecks,
        'successfulUpdates': successfulUpdates,
        'successRate': totalChecks > 0
            ? (successfulUpdates / totalChecks * 100).toStringAsFixed(1) + '%'
            : '0%',
        'savedPositionsCount': savedPositionsCount,
        'timeSinceLastUpdateSeconds': lastUpdateTimestamp > 0
            ? (now - lastUpdateTimestamp) ~/ 1000
            : null,
      };
    } catch (e) {
      debugPrint('‚ùå Erro ao obter estat√≠sticas: $e');
      return {
        'error': e.toString(),
        'isRunning': await isRunning(),
      };
    }
  }
}
